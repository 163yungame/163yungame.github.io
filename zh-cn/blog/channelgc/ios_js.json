{
  "filename": "ios_js.md",
  "__html": "<h1>命名空间</h1>\n<p>注:以易信JsBridge为例，命名空间window.YxJsBrige</p>\n<p>bridge 实现文件由客户端注入或者 webview 提供</p>\n<h3>代码参考</h3>\n<p>用WKWebView和第三方库WebViewJavascriptBridge注入js如下：</p>\n<pre><code>;(function(){\n    if(window.YxJsBrige){\n        return;\n    }\n\n    function setupWebViewJavascriptBridge(callback) {\n        if (window.WebViewJavascriptBridge) { return callback(WebViewJavascriptBridge); }\n        if (window.WVJBCallbacks) { return window.WVJBCallbacks.push(callback); }\n        window.WVJBCallbacks = [callback];\n        var WVJBIframe = document.createElement('iframe');\n        WVJBIframe.style.display = 'none';\n        WVJBIframe.src = 'https://__bridge_loaded__';\n        document.documentElement.appendChild(WVJBIframe);\n        setTimeout(function() { document.documentElement.removeChild(WVJBIframe) }, 0)\n    }\n\n    setupWebViewJavascriptBridge(function(bridge) {\n\n        var YxJsBrige = {};\n        var YxJsEvents = {};\n\n        YxJsBrige.on = function(event,callback) {\n            document.addEventListener(event,callback,false);\n            YxJsEvents[event] = 1;\n        }\n\n        YxJsBrige.off = function(event) {\n            document.removeEventListener(event);\n            delete YxJsEvents[event];\n        }\n        \n        YxJsBrige.call = function(method,data,responseCallback) {\n            bridge.callHandler(method,data,responseCallback);\n        }\n  \n        YxJsBrige.invoke = function(method,data,responseCallback) {\n            bridge.callHandler(method,data,responseCallback);\n        }\n\n        YxJsBrige.emit = function(name,detail) {\n            var ev = document.createEvent('Event');\n            ev.initEvent(name, true, true);\n            ev.detail = detail;\n            document.dispatchEvent(ev);\n        }\n\n        window.YxJsBrige = YxJsBrige;\n        window.YxJsEvents = YxJsEvents;\n    })\n\n})();\n\n</code></pre>\n<h1>需要实现接口列表</h1>\n<h2>1. setTitle</h2>\n<p>用于显示 webview 的 topbar 标题动态设置</p>\n<h3>参数</h3>\n<ul>\n<li>text：String</li>\n</ul>\n<h3>代码参考</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    NSString *text = [param objectForKey:@&quot;text&quot;];\n    [self.webViewController setTitle:text];\n}\n</code></pre>\n<h2>2. closeWindow</h2>\n<p>用于关闭webview窗口</p>\n<h3>代码参考</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    if (self.webViewController.navigationController.topViewController == webViewController)\n    {\n        [self.webViewController.navigationController popViewControllerAnimated:YES];\n    }\n    else if(self.webViewController.presentingViewController != nil)\n    {\n        [self.webViewController dismissViewControllerAnimated:YES\n                                              completion:nil];\n    }\n}\n</code></pre>\n<h2>3. browseImg</h2>\n<p>用于全屏幕预览图片</p>\n<h3>参数</h3>\n<ul>\n<li>imgInfos：Array<String>，需要预览的图片地址列表</li>\n<li>current: Int，初始化预览第几张</li>\n</ul>\n<h3>代码参考</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    NSArray *imgInfos = [param objectForKey:@&quot;imgInfos&quot;];\n    NSInteger currentIndex = [[param objectForKey:@&quot;current&quot;] integerValue];\n\n    if ([imgInfos isKindOfClass:[NSArray class]]) {\n        NSMutableArray *tmpArr = [NSMutableArray array];\n        for (NSString *urlString in imgInfos) {\n            NEGCShowLargeImageModel *largeImageModel = [[NEGCShowLargeImageModel alloc] init];\n            largeImageModel.imageUrl = urlString;\n            [tmpArr addObject:largeImageModel];\n        }\n        [[NEGCShowGalleryHelper shared] showGalleryWithImageView:nil imageList:tmpArr index:currentIndex];\n    }\n}\n\n</code></pre>\n<h2>4. openVideo</h2>\n<p>用于全屏幕观看视频</p>\n<h3>参数</h3>\n<ul>\n<li>videoUrl：String，视频地址</li>\n<li>title: String，播放时顶部标题显示</li>\n</ul>\n<h3>例子</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    NSString *videoUrl =  [param objectForKey:@&quot;videoUrl&quot;];\n    NSString *title =  [param objectForKey:@&quot;title&quot;];\n    if (videoUrl != nil)\n    {\n        NSURL * url = [NSURL URLWithString:videoUrl];\n        if (url != nil)\n        {\n            NEGCVideoPlayerConfig *config = [NEGCVideoPlayerConfig new];\n            config.mutePlay = NO;\n            NEGCVideoPlayViewController* videoPlayerVC = [[NEGCVideoPlayViewController alloc] initWithURL:url playConfig:config];\n            if(title != nil)\n            {\n                videoPlayerVC.title = title;\n            }\n            [self.webViewController presentViewController:videoPlayerVC animated:YES completion:nil];\n        }\n    }\n}\n\n</code></pre>\n<h2>5. openURL</h2>\n<p>用于打开外部地址</p>\n<h3>参数</h3>\n<ul>\n<li>url：String，需要打开的地址</li>\n<li>method: Int，模式:\n<ul>\n<li>0: 调用外部浏览器打开的</li>\n<li>2: 使用新建webview窗口打开以实现ios下的pop和push效果</li>\n</ul>\n</li>\n</ul>\n<h3>例子</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    NSNumber *method =  [param objectForKey:@&quot;method&quot;];\n    NSString *url =  [param objectForKey:@&quot;url&quot;];\n    if(method != nil &amp;&amp; url != nil) {\n        UINavigationController *nav = self.webViewController.navigationController;\n        if ([method integerValue] == 2)\n        {\n            [nav NEGC_pushURL:url\n                     animated:YES];\n        }\n        else if ([method integerValue] == 0)\n        {\n            [[UIApplication sharedApplication]openURL:[NSURL URLWithString:url]];\n        }\n    }\n}\n</code></pre>\n<h2>6. getFreeTrafficState</h2>\n<p>用于返回当前 app 环境是否有免流</p>\n<h3>回调</h3>\n<ul>\n<li>freeTraffic：Bool，是否有免流</li>\n</ul>\n<h3>例子</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    callback(@{@&quot;freeTraffic&quot;: @NO});\n}\n</code></pre>\n<h2>7. requestlogin</h2>\n<p>获取手机端信息，后续拿code去向授权服务器换取token</p>\n<h3>回调</h3>\n<ul>\n<li>code：String， 客户端登录之后分配给游戏中心用户的code</li>\n<li>idfa：String， 手机广告 id</li>\n<li>model：String， 手机硬件型号信息</li>\n<li>osVer：String， ios 版本号</li>\n<li>appId：String， 云游戏中心为你方分配的识别码</li>\n<li>hubbleId：String， hubble账号appid</li>\n</ul>\n<h2>8. share</h2>\n<p>获取手机端信息，后续拿code去向授权服务器换取token</p>\n<h3>参数</h3>\n<ul>\n<li>link：String， 分享内容点击的跳转地址</li>\n<li>title：String， 纯文字分享内容标题</li>\n<li>desc：String， 纯文字分享内容</li>\n<li>img_url：String， 图片分享的缩略图</li>\n</ul>\n<h3>例子</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    NEGCSharedWebDataModel *result = [NEGCSharedWebDataModel new];\n    result.url   = param[@&quot;link&quot;];\n    result.title = param[@&quot;title&quot;];\n    result.desc  = param[@&quot;desc&quot;];\n    result.iconURL = param[@&quot;img_url&quot;];\n    \n    NEGCWebViewController *viewController = self.webViewController;\n    WKWebView *webView = viewController.webView;\n    \n    NEGCSharedWebViewContent *content = [[NEGCSharedWebViewContent alloc] initWithWebView:webView\n                                                                                shareData:result];\n    NEGCSharedController *vc = [[NEGCSharedController alloc] initWithContent:content];\n    [vc showOnViewController:viewController];\n}\n</code></pre>\n<h2>9. enableWebviewBounce</h2>\n<p>是否启用 webview 的滑到底的回弹效果</p>\n<h3>参数</h3>\n<ul>\n<li>status：Bool，是否启用</li>\n</ul>\n<h3>例子</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    if (param &amp;&amp; param[@&quot;status&quot;]) {\n        [self.webViewController enableBounce:[param[@&quot;status&quot;]boolValue]];\n    }\n}\n</code></pre>\n<h2>10. enablePopGesture</h2>\n<p>是否启用 webview 的左滑返回</p>\n<h3>参数</h3>\n<ul>\n<li>status：Bool，是否启用</li>\n</ul>\n<h3>例子</h3>\n<pre><code>- (void)handle:(NSDictionary *)param\n      callback:(WVJBResponseCallback)callback\n{\n    if (param &amp;&amp; param[@&quot;status&quot;]) {\n        [self.webViewController enablePopGesture:[param[@&quot;status&quot;]boolValue]];\n    }\n}\n</code></pre>\n<h1>其他</h1>\n<h2>拼接code和写入cookie</h2>\n<p>调用游戏中心地址前先获取code，地址拼接code，code和app信息写入cookie后再调用，当没有这些信息的时候，web页面会调用requestlogin再次获取。</p>\n<h3>例子1</h3>\n<p>获取拼接code地址和cookie</p>\n<pre><code>- (NSString*)appendingCodeString:(NSString *)urlString code:(NSString *)codeString {\n    if (([urlString rangeOfString:@&quot;?code=&quot;].location != NSNotFound) || ([urlString rangeOfString:@&quot;&amp;code=&quot;].location != NSNotFound)) {\n        return urlString;\n    }\n    if(codeString) {\n        if (([urlString rangeOfString:@&quot;?&quot;].location != NSNotFound)) {\n            return [urlString stringByAppendingString:[NSString stringWithFormat:@&quot;&amp;code=%@&quot;, codeString]];\n        } else {\n            return [urlString stringByAppendingString:[NSString stringWithFormat:@&quot;?code=%@&quot;, codeString]];\n        }\n    } else {\n        return urlString;\n    }\n}\n\n- (void)getCodeUrl:(NSString *_Nonnull)url handler:(void(^_Nonnull)(NSString * _Nullable codeUrl, NSDictionary * _Nullable cookieDic,NSError * _Nullable error))handler {\n    if([NEGCSDK isGameCenterUrl:url]) {\n        __weak typeof(self) weakSelf = self;\n        [self getOpenCode:^(NSDictionary * _Nullable codeDic, NSString * _Nullable codeString, NSError * _Nullable error) {\n            __strong typeof(weakSelf) strongSelf = weakSelf;\n            if(codeDic) {\n                NSString *infoString = [NEGCSDK toJsonString:codeDic];\n                NSData *infoData = [infoString dataUsingEncoding:NSUTF8StringEncoding];\n                NSString *infoHash = [infoData base64EncodedStringWithOptions:0];\n                if (infoHash) {\n                    NSDictionary *cookieDic = [NSDictionary dictionaryWithObjectsAndKeys:infoHash,@&quot;ncg_app_info&quot;, nil];\n                    handler([strongSelf appendingCodeString:url code:codeString],cookieDic,nil);\n                } else {\n                    handler(nil,nil,error);\n                }\n            } else {\n                handler(nil,nil,error);\n            }\n        }];\n    } else {\n        handler(nil,nil,nil);\n    }\n}\n</code></pre>\n<h3>例子2</h3>\n<p>webView设置cookie</p>\n<pre><code>-(WKWebViewConfiguration *)config\n{\n    if (_config == nil)\n    {\n        _config = [[WKWebViewConfiguration alloc] init];\n        WKUserContentController *userContentController = [[WKUserContentController alloc] init];\n        for (NSString *key in _webConfig.cookieDic) {\n            NSString *appendString = [NSString stringWithFormat:@&quot;%@=%@&quot;, key, [_webConfig.cookieDic valueForKey:key]];\n            NSString *setCookie = [NSString stringWithFormat:@&quot;document.cookie='%@';&quot;, appendString];\n            WKUserScript *cookieScript = [[WKUserScript alloc] initWithSource:setCookie injectionTime:WKUserScriptInjectionTimeAtDocumentStart forMainFrameOnly:YES];\n            [userContentController addUserScript:cookieScript];\n        }\n        _config.userContentController = userContentController;\n        _config.allowsInlineMediaPlayback = YES;\n        _config.allowsAirPlayForMediaPlayback = YES;\n        _config.preferences = [[WKPreferences alloc] init];\n        _config.preferences.minimumFontSize = 0;\n        _config.preferences.javaScriptEnabled = YES;\n        _config.processPool = [[WKProcessPool alloc] init];\n    }\n    return _config;\n}\n\n- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation\n{\n    if (_webConfig &amp;&amp; _webConfig.cookieDic) {\n        //为什么在完全加载完成后需要重新给WKWebView设置Cookie呢？\n        //如果你不这样做的话很有可能因为a标签跳转，导致下一次跳转的时候Cookie丢失。\n        NSString *JSFuncString =\n        @&quot;function setCookie(name,value,expires)\\\n        {\\\n        var oDate=new Date();\\\n        oDate.setDate(oDate.getDate()+expires);\\\n        document.cookie=name+'='+value+';expires='+oDate+';path=/'\\\n        }\\\n        function getCookie(name)\\\n        {\\\n        var arr = document.cookie.match(new RegExp('(^| )'+name+'=({FNXX==XXFN}*)(;|$)'));\\\n        if(arr != null) return unescape(arr[2]); return null;\\\n        }\\\n        function delCookie(name)\\\n        {\\\n        var exp = new Date();\\\n        exp.setTime(exp.getTime() - 1);\\\n        var cval=getCookie(name);\\\n        if(cval!=null) document.cookie= name + '='+cval+';expires='+exp.toGMTString();\\\n        }&quot;;\n        NSMutableString *JSCookieString = JSFuncString.mutableCopy;\n        for (NSString *key in _webConfig.cookieDic) {\n            NSString *excuteJSString = [NSString stringWithFormat:@&quot;setCookie('%@', '%@', 1);&quot;, key, [_webConfig.cookieDic valueForKey:key]];\n            [JSCookieString appendString:excuteJSString];\n        }\n        [webView evaluateJavaScript:JSCookieString completionHandler:^(id obj, NSError * _Nullable error) {\n            NSLog(@&quot;%@&quot;,error);\n        }];\n    }\n}\n</code></pre>\n<h2>关闭webview前询问是否可以关闭</h2>\n<h3>例子</h3>\n<pre><code>- (void)canBackOrClose:(void(^_Nonnull)(BOOL canBack))handler {\n    [self.webView evaluateJavaScript:@&quot;window.hasOwnProperty('canCloseWebView') &amp;&amp; window.canCloseWebView instanceof Function ? canCloseWebView() : true&quot; completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n        if(error == nil &amp;&amp; result != nil) {\n            if([result boolValue]) {\n                handler(YES);\n            } else {\n                handler(NO);\n            }\n        } else {\n            handler(YES);\n        }\n    }];\n}\n</code></pre>\n"
}