{
  "filename": "python_sign_demo.md",
  "__html": "<h1>python 签名示例</h1>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> Crypto.PublicKey <span class=\"hljs-keyword\">import</span> RSA\n<span class=\"hljs-keyword\">from</span> Crypto.Signature <span class=\"hljs-keyword\">import</span> PKCS1_v1_5\n<span class=\"hljs-keyword\">from</span> Crypto.Hash <span class=\"hljs-keyword\">import</span> SHA\n<span class=\"hljs-keyword\">from</span> binascii <span class=\"hljs-keyword\">import</span> hexlify\n<span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> quote_plus\n\n<span class=\"hljs-string\">\"\"\"\nOriginal parameter string\n\"\"\"</span>\nstrToSign = <span class=\"hljs-string\">'03146776612-14579579182016-03-14 20:18:38yb60becc49c9-8ce6-4b5d-b214-6614fbfd03f21'</span>\n\n<span class=\"hljs-string\">\"\"\"\nCAUTION: The str before sign needs to be urlencoded first.\n         using urllib.quote_plus instead of urllib.quote\n\"\"\"</span>\nencodedStr = quote_plus(strToSign)\n\n<span class=\"hljs-string\">\"\"\"\nPlace the PRIVATE key(openssl generated pem format key pair) in the right place.\n\"\"\"</span>\npriv_key = RSA.importKey(open(<span class=\"hljs-string\">'pkcs8_rsa_private_key.pem'</span>, <span class=\"hljs-string\">'r'</span>).read())\n\n<span class=\"hljs-string\">\"\"\"\nSHA1 hash the str first then sign it using the private key.\n\"\"\"</span>\nsignedStr = PKCS1_v1_5.new(priv_key).sign(SHA.new(encodedStr))\n\n<span class=\"hljs-string\">\"\"\"\nFinally, convert the bytes to hex.\n\"\"\"</span>\nhexStr = hexlify(signedStr)\n\n<span class=\"hljs-string\">\"\"\"\nYou can load this python file and manage to produce the correct hexStr using these functions as a base. You can test againest with each function seperatedly to find out what goes wrong. Good luck!\n\n\"\"\"</span>\n\n</code></pre>\n",
  "link": "/zh-cn/docs/server/python_sign_demo.html",
  "meta": {}
}